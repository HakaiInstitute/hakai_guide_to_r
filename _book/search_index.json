[
["introduction.html", "Hakai Institute R Data-Analyst Guide Chapter 1 Introduction 1.1 Acknowledgements", " Hakai Institute R Data-Analyst Guide Brett Johnson 2017-04-12 Chapter 1 Introduction The objective of this guide is to serve as: 1) a reference guide for the new R Analyst; 2) best-practice guidelines for Hakai staff to make reproducible analyses, and use literate programming methods in R-Studio; and 3) a guide to enhance collaborative capacities for ecological analyses within and between Hakai research programs and generally the science community using Git and GitHub. My hope is this guide will teach you a prescribed methodology that results in; high analytical quality, reproducible research methods, understanding the benefits of open science practices, and opens the world of collaboration for anlaysts to contribute to each others projects. The beginning of this guide may seem difficult, but in making this guide I’ve kept long-term goals in mind and in a sense I have front-loaded the R learning experience with important concepts that will serve you in the near future and in the long-run. 1.1 Acknowledgements Much of this document simply refers you to material that others have worked very hard to make simple. I simply point to these resources in an order that makes sense to me and forms a systematic approach. Many thanks to the following people for making this possible: * Dr. Jenny Bryan, UBC Professor in the Masters of Data Science Program. Twitter, GitHUB. * Dr. Roger Peng, Professor of Biostatistics at Johns Hopkins University. Website, GitHUB. * Dr. Hadley Wickham, Chief Scientists at R-Studio. Website, Twitter, GitHUB. "],
["reference-guide-for-the-new-r-analyst.html", "Chapter 2 Reference Guide for the New R Analyst 2.1 Set-up GitHUB 2.2 Install and Set up R and R Studio 2.3 Install and set-up Git 2.4 Familiarize yourself with R and R-Studio 2.5 Learning Objectives: 2.6 The Process of Data Analysis", " Chapter 2 Reference Guide for the New R Analyst 2.1 Set-up GitHUB There is a reason this document you are reading is hosted on github.com. We will be working with GitHUB throughout this guide and you’ll want to use Git while you’re working on analyses in the future. If you’re interested in learning why you should use git, read Chapter 1; ‘Why Git? Why GitHUB’ from Jenny Bryans Book. Otherwise take my word for it and we can get this part out of the way before we move onto learning R. First, you’re going to want to sign up for a GitHUB account Now that you have a GitHUB account, you should fork this Repository (Repo) so that you can access this document from your GitHUB profile, edit it, a make a ‘pull request’ to suggest edits to me. This serves two purposes: 1) the quality of this guide will be improved by your contribution; and 2) forking repos and making pull-requests is training you for the workflow you will use when contributing to colleagues’ analyses in the future. To successfully fork this repo and suggest edits read Chapter 24 of Jenny Brians Book; ‘Fork a Repo’. You’ll notice that this file is a ‘.md’ file which stands for Markdown. This is a plain text file that uses a minimal number of symbols to render the output text into something elegant and simple. Using plain text files is recommended because almost any operating system can read them and they are most likely to be readable in the distant future, rather than using a proprietary file formats like word. Read this if you’re interested in markdown syntax, otherwise come back to it later. 2.2 Install and Set up R and R Studio R is the statistical programming language that R Studio understands. I think of R Studio being the front-end user interface to the coding language R which is running in the background. For this all to work you you need to download two files to start; R and R Studio. Watch my Youtube Video on how to install R and R Studio Go to https://cran.r-project.org/ and follow the link to the download for your operating system. Go to https://www.rstudio.com/products/rstudio/download/ to download R studio 2.3 Install and set-up Git Next you’re going to install Git. Similar to the relationship between R and R-Studio, Git is the local version control system running in the back ground on your computer while GitHUB is the remote user interface for saving, tracking, and sharing updated versions of your analyses that is hosted on a remote server. Installing Git locally and getting Git to communicate to your remote GitHUB website account, and then getting them to talk with RStudio takes a number of steps to complete…This next part can be painful to work through, but it is 100 % neccesary and well worth it in the long-run. Install Git and GitHUB and get them talking to R-Studio using Jenny Bryan’s Guide, start at chapter 7 and work to the end of chapter 13. If you’re successful: Thank god that’s over. Otherwise continue on to Chapter 14 and 15 if you’re having problems. Congratulations you now have setup the three main tools in the R Analyst toolbox: R, R Studio and GitHUB. 2.4 Familiarize yourself with R and R-Studio Now that you have the tools you need, lets get familiar with R-Studio and the R programming language. Lets install you’re first package in R-Studio. You can think of packages as extensions to R. Because R is open-source, people often write packages to make different functions, features, or analyses possible. Your first package will be swirl(). swirl() is a package for learning (and teaching) statistics and R simultaneously and interactively. Watch this youtube video to install your first package and start learning R with the swirl() package. 2.5 Learning Objectives: There are a plethora of resources to help you learn R. After a year and a half of sifting through this material and learning R myself I’ve found these resources to be the best, and I present them to you in an order I wish I had learned them in. Together these objectives direct you through an efficient way to learn R, and combined with a graduate level understanding of statistics you should gain an intermediate skill level in R using a very high-level, and modern approach. Complete chapter 1 in swirl() Next, watch this R-Studio Tutorial. Skip over the sections related to the Server Pro version of R-Studio. Complete chapters 2 – 7 in swirl() inside of RStudio. Watch R-Studio tutorial: Projects and R Studio Commplete the remaining chapters in the swirl() R Programming course, and try some of the other swirl courses that interest you. Read Chapter 7 of Jenny Bryans Book to get your own project set up on GitHUB first and then in R-Studio so you can start experimenting with your own data set and your own analysis. Read from front to back Hadley Wickam and Garrett Grolemund’s Book: R For Data Science to master the ‘tidyverse’; a deadly combination of packages and a well thought out and systematic approach to “import, tidy, transform, visualize, and model data.” Using the tidyverse as a foundation for your coding replaces the ‘million and 1 ways’ of doing things in R into a concise, grammar of data analysis programming. All these learning objectives will take some time to complete, and you will be very frustrated at points but know that we all have suffered through this initial learning curve and eventually it gets easier. 2.6 The Process of Data Analysis Roger Peng puts it simplest: * Define the question * Define the ideal data set * Determine what data you can access * Obtain the data * Clean the data * Exploratory data analysis * Statistical prediction/modeling * Interpret results * Challenge results * Synthesize/write up results * Create reproducible code "],
["guidelines-for-hakai-data-analysts.html", "Chapter 3 Guidelines for Hakai Data Analysts 3.1 Programming Style Guide 3.2 Organization of a Data Analysis Workflow 3.3 Reproducible Research, Literate Programming, and the Open Notebook 3.4 Reproducible research using markdown, notebooks, or other (Need significant additions, editing, and contributions beyond here)", " Chapter 3 Guidelines for Hakai Data Analysts 3.1 Programming Style Guide Google’s R Style Guide is an excellent place to start. Googles guide recommendeds two space indents for new lines of code within the same function, but I prefer 8. See Roger Pengs Coding Standards Video for some excellent suggestions that I mostly adhere to. 3.2 Organization of a Data Analysis Workflow I keep all files associated with an analysis in a google drive folder, so that I can give collaborators access to RAW data so they can work with it directly. I use a default folder structure for every analysis based on the files that are typically produced from every analysis. First I create a folder for the name of the project and create these sub-folders within the project folder. The sub folders I use are: * raw data * processed data * raw scripts * final scripts * exploratory figures * final figures * notebook I typically have my notebook folder set as my working directory and navigate from there to save figures, processed data etc. using the “../processed data/yourfilename.csv”. The .. before the forward slash tells R to navigate up one level from your working directory, and then down one level into, in this case, your processed data folder. 3.3 Reproducible Research, Literate Programming, and the Open Notebook These three concepts bring together a very modern way of conducting science. These are the benefits of using these methods: They save you work in the long run by being able to reproduce your own analyses after you’ve long forgotten the details of how they were conducted If you weave a narrative text into your computer code you’ll be able to understand what you were thinking at a later time when you revisit it. You can easily collaborate show your peers that you have nothing to hide in your analytical methods that you are willing to share your analyses in hopes that others will improve the quality of your analysis by offering their insight. Watch: * Dr. RD Peng’s youtube video on reproducible research. * As well as his video on Literate Programming * Open notebook science involves providing all of your research thoughts and ideas from within your notebook for maximum transparacey. 3.4 Reproducible research using markdown, notebooks, or other (Need significant additions, editing, and contributions beyond here) R Notebooks is a good way to collaborate with other analysts. When using R Notebooks it’s best to set defualts to: You want your YAML header to look something like this: output: html_notebook: default, keep_md: TRUE github_document: default # "],
["collaborate.html", "Chapter 4 Collaborate", " Chapter 4 Collaborate Objectives: * Read Chapters 16 – 24 in Jenny Bryans Book to get a project going to Git HUB or work on someone elses. ### Collaboration with GitHUB ### Access to data used for analyses for Hakai Analysts ### Access to data for collaborators outside of Hakai "],
["additional-references-and-resources.html", "Chapter 5 Additional References and Resources", " Chapter 5 Additional References and Resources Journal of Biostatistics Guide for Reproducible Research Compiled Ideas on Managing a Statistical Analysis Project "]
]
