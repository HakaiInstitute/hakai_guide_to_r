[
["reference-guide-for-the-new-r-analyst.html", "2 Reference Guide for the New R Analyst 2.1 Set-up GitHUB 2.2 Install and Set up R and R Studio 2.3 Install and set-up Git 2.4 Familiarize yourself with R and R-Studio 2.5 Learning Objectives: 2.6 The Process of Data Analysis", " 2 Reference Guide for the New R Analyst 2.1 Set-up GitHUB The reason this document is hosted on GitHUB is that we’ll be working with GitHUB throughout this guide and throughout your own analyses. If you’re interested in learning why you should use git, read Chapter 1; ‘Why Git? Why GitHUB’ from Jenny Bryans Book. Otherwise take my word for it and we can get this part out of the way before we move onto learning R. First, you’re going to want to sign up for a GitHUB account Now that you have a GitHUB account, you should fork this repository (repo) so that you can access this document from your GitHUB profile, edit it, and make a ‘pull request’ to suggest edits to me. This serves two purposes: 1) the quality of this guide will be improved if you take time to edit chapters and contribute your insights on what didn’t work for you; and 2) forking repos and making pull-requests is training you for the workflow you will use when contributing to colleagues’ analyses in the very near future. To successfully fork this repo and suggest edits simply go to my repo here and click on the name of this chapter: ‘new_analysts.Rmd’, once it’s open click on the pencil icon to suggest edits. Editing automcatically forks the repo and makes a copy in your own list of repos. Now you can make all the edits you’d like and when your happy you can click on ‘pull request’ to send the updates back to me for my review. If you aren’ successfull forking my repo, read Chapter 24 of Jenny Brians Book; ‘Fork a Repo’. You’ll notice that this file is a ‘.Rmd’ file which stands for R Markdown. This is a plain text file that uses a minimal number of symbols to render the output text into something elegant and simple. Using plain text files for your analyses and for story on gitHUB is recommended because almost any operating system can read them and they are most likely to be readable in the distant future, rather than using a proprietary file formats like word. Read this if you’re interested in markdown syntax, otherwise come back to it later. 2.2 Install and Set up R and R Studio R is the statistical programming language that R Studio understands. I think of R Studio as being the front-end user interface to the coding language R which is running in the background. For this all to work you you need to download two files to start; R and R Studio. Watch my Youtube Video on how to install R and R Studio Go to https://cran.r-project.org/ and follow the link to the download for your operating system. Go to https://www.rstudio.com/products/rstudio/download/ to download R studio 2.3 Install and set-up Git Next you’re going to install Git. Git tracks the changes you make in R-Studio locally and upon your request, pushes changes to your remote repository at GitHUB. Similar to the relationship between R and R-Studio, Git is the local version control system running in the back ground on your computer while GitHUB is the remote user interface for saving, tracking, and sharing updated versions of your analyses that is hosted on a remote server. Installing Git locally and getting Git to communicate to your remote GitHUB website account, and then getting them to talk with RStudio takes a number of steps to complete…This next part can be painful to work through, but it is 100 % neccesary and well worth it in the long-run. Install Git and GitHUB and get them talking to R-Studio using Jenny Bryan’s Guide, start at chapter 7 and work to the end of chapter 13. If you’re successful: Thank god that’s over. Otherwise continue on to Chapter 14 and 15 if you’re having problems. Congratulations you now have setup the three main tools in the R Analyst toolbox: R, R Studio and GitHUB. 2.4 Familiarize yourself with R and R-Studio Now that you have the tools you need, lets get familiar with R-Studio and the R programming language. Lets install you’re first package in R-Studio. You can think of packages as extensions to R. Because R is open-source, people often write packages to make different functions, features, or analyses possible. Your first package will be swirl(). swirl() is a package for learning (and teaching) statistics and R simultaneously and interactively. Watch this youtube video to install your first package and start learning R with the swirl() package. 2.5 Learning Objectives: There are a plethora of resources to help you learn R. After a year and a half of sifting through this material and learning R myself I’ve found these resources to be the best, and I present them to you in an order I wish I had learned them in. Together these objectives direct you through an efficient way to learn R, and combined with a graduate level understanding of statistics you should gain an intermediate skill level in R using a very high-level, and modern approach. Complete chapter 1 in swirl() Next, watch this R-Studio Tutorial. Skip over the sections related to the Server Pro version of R-Studio. Complete chapters 2 – 7 in swirl() inside of RStudio. Watch R-Studio tutorial: Projects and R Studio Commplete the remaining chapters in the swirl() R Programming course, and try some of the other swirl courses that interest you. Read Chapter 7 of Jenny Bryans Book to get your own project set up on GitHUB first and then in R-Studio so you can start experimenting with your own data set and your own analysis. Read from front to back Hadley Wickam and Garrett Grolemund’s Book: R For Data Science to master the ‘tidyverse’; a deadly combination of packages and a well thought out and systematic approach to “import, tidy, transform, visualize, and model data.” Using the tidyverse as a foundation for your coding replaces the ‘million and 1 ways’ of doing things in R into a concise, grammar of data analysis programming. All these learning objectives will take some time to complete, and you will be very frustrated at points but know that we all have suffered through this initial learning curve and eventually it gets easier. 2.6 The Process of Data Analysis Roger Peng puts it simplest: * Define the question * Define the ideal data set * Determine what data you can access * Obtain the data * Clean the data * Exploratory data analysis * Statistical prediction/modeling * Interpret results * Challenge results * Synthesize/write up results * Create reproducible code "]
]
